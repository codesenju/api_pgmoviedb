#################
## APPLICATION ##
#################
# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgmoviedb
  namespace: api 
  labels:
    app: pgmoviedb
spec:
  selector:
    matchLabels:
      app: pgmoviedb
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: pgmoviedb
    spec:
      serviceAccountName: envoy-proxy
#      nodeSelector:
#       karpenter.sh/provisioner-name: arm-fleet
      containers:
      - name: postgres
        image: codesenju/pgmoviedb.api.local:latest
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 1024m
            memory: 1024Mi
          limits:
            cpu: 2048m
            memory: 2048Mi
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 180
          timeoutSeconds: 60
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 60
        readinessProbe:
          exec:
            command:
              - pg_isready
          initialDelaySeconds: 120
          timeoutSeconds: 60
          periodSeconds: 10
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: DB_PASSWORD
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: DB_USERNAME
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: DB_NAME
        ports:
        - containerPort: 5432
          name: postgres-5432
        volumeMounts:
          - name: pgdata
            mountPath: /var/lib/postgresql/data
            readOnly: false
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: pgdata-claim-dynamic
#############
## SERVICE ##
#############
# https://kubernetes.io/docs/concepts/services-networking/service/
---
apiVersion: v1
kind: Service
metadata:
  name: pgmoviedb
  namespace: api
spec:
  selector:
    app: pgmoviedb
  type: ClusterIP
  ports:
  - name: postgres-5432
    protocol: TCP
    port: 5432
    targetPort: 5432
#################
## SERVICE NLB ##
#################
## https://kubernetes.io/docs/concepts/services-networking/service/
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: api-postgres-nlb
#  namespace: api
#  # Create a service with an internet-facing Network Load Balancer that load balances to IP targets
#  # https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html#network-load-balancer
#  # https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/nlb/
#  annotations:
#    service.beta.kubernetes.io/aws-load-balancer-type: external
#    # service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance
#    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
#    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
#    service.beta.kubernetes.io/aws-load-balancer-name: api-postgres-nlb # Optional
#    # service.beta.kubernetes.io/aws-load-balancer-healthcheck-path:
#    ## https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/service/annotations/#subnets
#    ##service.beta.kubernetes.io/aws-load-balancer-subnets: subnet-***, subnet-***
#spec:
#  ports:
#    - port: 5123
#      targetPort: 5432
#      protocol: TCP
#  type: LoadBalancer
#  selector:
#    app: pgmoviedb
################
## CONFIG MAP ##
################
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: api
data:
  DB_NAME: movie
#############
## SECRETS ##
#############
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: api
data:
  DB_PASSWORD: MTIzNDU=
  DB_USERNAME: cG9zdGdyZXM=
# base64 encoded password
# https://github.com/kubernetes-sigs/aws-efs-csi-driver/tree/master/examples/kubernetes/dynamic_provisioning
#############
## STORAGE ##
#############
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgdata-claim-dynamic
  namespace: api
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc-dynamic
  resources:
    requests:
      storage: 1Gi
# kubectl logs efs-csi-controller-* -n kube-system -c csi-provisioner --tail 10
#############
## HPA ##
#############
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: pgmoviedb
  namespace: api
spec:
  maxReplicas: 20
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pgmoviedb
  targetCPUUtilizationPercentage: 80
